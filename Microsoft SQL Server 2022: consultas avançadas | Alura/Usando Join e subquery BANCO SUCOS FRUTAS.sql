SELECT * FROM TABELA_DE_VENDEDORES;
SELECT * FROM NOTAS_FISCAIS;

SELECT MATRICULA, COUNT (*) NOTAS_FISCAIS FROM NOTAS_FISCAIS GROUP BY MATRICULA; 

SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT (*) NOTAS_FISCAIS FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES ON NOTAS_FISCAIS.MATRICULA =TABELA_DE_VENDEDORES.MATRICULA
GROUP BY NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME; 

--SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS 
--GROUP BY CODIGO_DO_PRODUTO HAVING SUM(QUANTIDADE) > 394000 
--ORDER BY SUM(QUANTIDADE) DESC;

SELECT ITENS_NOTAS_FISCAIS.CODIGO_DO_PRODUTO, TABELA_DE_PRODUTOS.NOME_DO_PRODUTO, SUM (QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS
INNER JOIN TABELA_DE_PRODUTOS ON ITENS_NOTAS_FISCAIS.CODIGO_DO_PRODUTO = TABELA_DE_PRODUTOS.CODIGO_DO_PRODUTO
GROUP BY ITENS_NOTAS_FISCAIS.CODIGO_DO_PRODUTO, TABELA_DE_PRODUTOS.NOME_DO_PRODUTO HAVING SUM (QUANTIDADE) > '394000' ORDER BY SUM (QUANTIDADE) DESC;

--LEFT JOIN ENCONTRAR RESULTADOS A ESQUERDA EM RELAÇÃO A DIREITA
-- FULL JOIN BUSCA OS DOIS LADOS 

SELECT TC.CPF AS CPF_DO_CADASTRO, NF.CPF AS CPF_NOTA, TC.NOME AS NOME_CLIENTE FROM TABELA_DE_CLIENTES TC 
INNER JOIN NOTAS_FISCAIS NF ON TC.CPF=NF.CPF;

INSERT INTO TABELA_DE_CLIENTES ( CPF, NOME, ENDERECO_1, ENDERECO_2, BAIRRO, CIDADE, ESTADO, CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO, VOLUME_DE_COMPRA, PRIMEIRA_COMPRA)
VALUES ('23412632331', 'Juliana Oliveira', 'Avenida Paulita', '','JARDIN', 'São Paulo', 'SP', '23400000', '1989-02-04', 33, 'F', 500000, 2450,0);

SELECT DISTINCT TC.CPF AS CPF_DO_CADASTRO, NF.CPF AS CPF_NOTA, TC.NOME AS NOME_CLIENTE FROM TABELA_DE_CLIENTES TC 
LEFT JOIN NOTAS_FISCAIS NF ON TC.CPF=NF.CPF;

SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES; --12
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES; --4

SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
UNION ALL -- NÃO APLICA O DISTINCT
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT DISTINCT BAIRRO, 'CLIENTE' AS ORIGEM FROM TABELA_DE_CLIENTES
UNION 
SELECT DISTINCT BAIRRO, 'VENDEDOR' AS ORIGEM FROM TABELA_DE_VENDEDORES; -- POR CONTA DA SEGUNDA COLUNA, NÃO APLICA O DISTINCT

-- SUB QUERY
SELECT * FROM TABELA_DE_CLIENTES WHERE BAIRRO IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES);

-- Desafio: transformando HAVING em Subconsultas
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO HAVING SUM(INF.QUANTIDADE) > 394000 
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- CERTO: 
SELECT SC.CODIGO_DO_PRODUTO, SC.NOME_DO_PRODUTO, SC.QUANTIDADE FROM ( 
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO)SC
WHERE SC.QUANTIDADE > 394000
ORDER BY SC.QUANTIDADE DESC;


--VISÕES
SELECT MEDIA_EMBALAGENS.EMBALAGEM, MEDIA_EMBALAGENS.PRECO_MEDIO FROM (
    SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO 
    FROM TABELA_DE_PRODUTOS 
    GROUP BY EMBALAGEM
) MEDIA_EMBALAGENS 
WHERE MEDIA_EMBALAGENS.PRECO_MEDIO <= 10;

SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO 
FROM TABELA_DE_PRODUTOS 
GROUP BY EMBALAGEM;

CREATE VIEW MEDIA_EMBALAGENS AS 
SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO 
FROM TABELA_DE_PRODUTOS 
GROUP BY EMBALAGEM;

SELECT EMBALAGEM, PRECO_MEDIO FROM MEDIA_EMBALAGENS 
WHERE PRECO_MEDIO <= 10;

-- DESAFIO: Redesenhe esta consulta criando uma visão para a lista de quantidades totais por produto e aplicando a condição e ordenação sobre esta mesma visão.

CREATE VIEW LISTA_QUANTIDADE AS 
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO;

SELECT * FROM LISTA_QUANTIDADE
WHERE QUANTIDADE > 394000 
ORDER BY QUANTIDADE DESC;




